// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.locale = NSLocale(localeIdentifier:"en_US_POSIX")
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

            // Decoder for [Coordinate]
            Decoders.addDecoder(clazz: [Coordinate].self) { (source: AnyObject) -> [Coordinate] in
                return Decoders.decode(clazz: [Coordinate].self, source: source)
            }
            // Decoder for Coordinate
            Decoders.addDecoder(clazz: Coordinate.self) { (source: AnyObject) -> Coordinate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Coordinate()
                instance.sectorId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sectorId"])
                instance.coordinate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["coordinate"])
                instance.shape = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shape"])
                return instance
            }


            // Decoder for [Error]
            Decoders.addDecoder(clazz: [Error].self) { (source: AnyObject) -> [Error] in
                return Decoders.decode(clazz: [Error].self, source: source)
            }
            // Decoder for Error
            Decoders.addDecoder(clazz: Error.self) { (source: AnyObject) -> Error in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Error()
                instance.result = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.details = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["details"])
                return instance
            }


            // Decoder for [Events]
            Decoders.addDecoder(clazz: [Events].self) { (source: AnyObject) -> [Events] in
                return Decoders.decode(clazz: [Events].self, source: source)
            }
            // Decoder for Events
            Decoders.addDecoder(clazz: Events.self) { (source: AnyObject) -> Events in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Events()
                instance.eventId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["eventId"])
                instance.categorieName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["categorieName"])
                instance.internetSaleStartDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["internetSaleStartDate"])
                instance.internetSaleEndDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["internetSaleEndDate"])
                instance.saleStartDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["saleStartDate"])
                instance.saleEndDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["saleEndDate"])
                instance.memberSaleStartDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["memberSaleStartDate"])
                instance.memberSaleEndDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["memberSaleEndDate"])
                instance.eventDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["eventDate"])
                instance.eventTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["eventTime"])
                instance.stadiumName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stadiumName"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.principalClub = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["principalClub"])
                instance.opponentClub = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["opponentClub"])
                instance.principalClubImage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["principalClubImage"])
                instance.opponentClubImage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["opponentClubImage"])
                instance.expressSale = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["expressSale"])
                return instance
            }


            // Decoder for [EventseventIdsectorssectorIdsubsectorssubsectorIdSeats]
            Decoders.addDecoder(clazz: [EventseventIdsectorssectorIdsubsectorssubsectorIdSeats].self) { (source: AnyObject) -> [EventseventIdsectorssectorIdsubsectorssubsectorIdSeats] in
                return Decoders.decode(clazz: [EventseventIdsectorssectorIdsubsectorssubsectorIdSeats].self, source: source)
            }
            // Decoder for EventseventIdsectorssectorIdsubsectorssubsectorIdSeats
            Decoders.addDecoder(clazz: EventseventIdsectorssectorIdsubsectorssubsectorIdSeats.self) { (source: AnyObject) -> EventseventIdsectorssectorIdsubsectorssubsectorIdSeats in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventseventIdsectorssectorIdsubsectorssubsectorIdSeats()
                instance.ticketId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ticketId"])
                instance.ticketStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ticketStatus"])
                instance.ownerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ownerId"])
                instance.seatNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["seatNumber"])
                return instance
            }


            // Decoder for [Gates]
            Decoders.addDecoder(clazz: [Gates].self) { (source: AnyObject) -> [Gates] in
                return Decoders.decode(clazz: [Gates].self, source: source)
            }
            // Decoder for Gates
            Decoders.addDecoder(clazz: Gates.self) { (source: AnyObject) -> Gates in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Gates()
                instance.gateId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gateId"])
                instance.gateName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gateName"])
                instance.sectors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sectors"])
                return instance
            }


            // Decoder for [InlineResponse200]
            Decoders.addDecoder(clazz: [InlineResponse200].self) { (source: AnyObject) -> [InlineResponse200] in
                return Decoders.decode(clazz: [InlineResponse200].self, source: source)
            }
            // Decoder for InlineResponse200
            Decoders.addDecoder(clazz: InlineResponse200.self) { (source: AnyObject) -> InlineResponse200 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse200()
                instance.eventId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["eventId"])
                instance.categorieName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["categorieName"])
                instance.internetSaleStartDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["internetSaleStartDate"])
                instance.internetSaleEndDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["internetSaleEndDate"])
                instance.saleStartDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["saleStartDate"])
                instance.saleEndDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["saleEndDate"])
                instance.memberSaleStartDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["memberSaleStartDate"])
                instance.memberSaleEndDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["memberSaleEndDate"])
                instance.eventDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["eventDate"])
                instance.eventTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["eventTime"])
                instance.stadiumName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stadiumName"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.principalClub = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["principalClub"])
                instance.opponentClub = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["opponentClub"])
                instance.principalClubImage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["principalClubImage"])
                instance.opponentClubImage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["opponentClubImage"])
                instance.expressSale = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["expressSale"])
                return instance
            }


            // Decoder for [InlineResponse2001]
            Decoders.addDecoder(clazz: [InlineResponse2001].self) { (source: AnyObject) -> [InlineResponse2001] in
                return Decoders.decode(clazz: [InlineResponse2001].self, source: source)
            }
            // Decoder for InlineResponse2001
            Decoders.addDecoder(clazz: InlineResponse2001.self) { (source: AnyObject) -> InlineResponse2001 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2001()
                instance.gates = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["gates"])
                instance.map = Decoders.decodeOptional(clazz: InlineResponse2001Map.self, source: sourceDictionary["map"])
                return instance
            }


            // Decoder for [InlineResponse2001Gates]
            Decoders.addDecoder(clazz: [InlineResponse2001Gates].self) { (source: AnyObject) -> [InlineResponse2001Gates] in
                return Decoders.decode(clazz: [InlineResponse2001Gates].self, source: source)
            }
            // Decoder for InlineResponse2001Gates
            Decoders.addDecoder(clazz: InlineResponse2001Gates.self) { (source: AnyObject) -> InlineResponse2001Gates in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2001Gates()
                instance.gateId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gateId"])
                instance.gateName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gateName"])
                instance.sectors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sectors"])
                return instance
            }


            // Decoder for [InlineResponse2001Map]
            Decoders.addDecoder(clazz: [InlineResponse2001Map].self) { (source: AnyObject) -> [InlineResponse2001Map] in
                return Decoders.decode(clazz: [InlineResponse2001Map].self, source: source)
            }
            // Decoder for InlineResponse2001Map
            Decoders.addDecoder(clazz: InlineResponse2001Map.self) { (source: AnyObject) -> InlineResponse2001Map in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2001Map()
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.coordinates = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["coordinates"])
                return instance
            }


            // Decoder for [InlineResponse2001MapCoordinates]
            Decoders.addDecoder(clazz: [InlineResponse2001MapCoordinates].self) { (source: AnyObject) -> [InlineResponse2001MapCoordinates] in
                return Decoders.decode(clazz: [InlineResponse2001MapCoordinates].self, source: source)
            }
            // Decoder for InlineResponse2001MapCoordinates
            Decoders.addDecoder(clazz: InlineResponse2001MapCoordinates.self) { (source: AnyObject) -> InlineResponse2001MapCoordinates in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2001MapCoordinates()
                instance.sectorId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sectorId"])
                instance.coordinate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["coordinate"])
                instance.shape = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shape"])
                return instance
            }


            // Decoder for [InlineResponse2001Sectors]
            Decoders.addDecoder(clazz: [InlineResponse2001Sectors].self) { (source: AnyObject) -> [InlineResponse2001Sectors] in
                return Decoders.decode(clazz: [InlineResponse2001Sectors].self, source: source)
            }
            // Decoder for InlineResponse2001Sectors
            Decoders.addDecoder(clazz: InlineResponse2001Sectors.self) { (source: AnyObject) -> InlineResponse2001Sectors in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2001Sectors()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.selectSeats = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selectSeats"])
                instance.available = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["available"])
                instance.hasTickets = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["hasTickets"])
                return instance
            }


            // Decoder for [InlineResponse2002]
            Decoders.addDecoder(clazz: [InlineResponse2002].self) { (source: AnyObject) -> [InlineResponse2002] in
                return Decoders.decode(clazz: [InlineResponse2002].self, source: source)
            }
            // Decoder for InlineResponse2002
            Decoders.addDecoder(clazz: InlineResponse2002.self) { (source: AnyObject) -> InlineResponse2002 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2002()
                instance.subsectors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["subsectors"])
                return instance
            }


            // Decoder for [InlineResponse2002Subsectors]
            Decoders.addDecoder(clazz: [InlineResponse2002Subsectors].self) { (source: AnyObject) -> [InlineResponse2002Subsectors] in
                return Decoders.decode(clazz: [InlineResponse2002Subsectors].self, source: source)
            }
            // Decoder for InlineResponse2002Subsectors
            Decoders.addDecoder(clazz: InlineResponse2002Subsectors.self) { (source: AnyObject) -> InlineResponse2002Subsectors in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2002Subsectors()
                instance.subsectorId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subsectorId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.hasTickets = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["hasTickets"])
                return instance
            }


            // Decoder for [InlineResponse2003]
            Decoders.addDecoder(clazz: [InlineResponse2003].self) { (source: AnyObject) -> [InlineResponse2003] in
                return Decoders.decode(clazz: [InlineResponse2003].self, source: source)
            }
            // Decoder for InlineResponse2003
            Decoders.addDecoder(clazz: InlineResponse2003.self) { (source: AnyObject) -> InlineResponse2003 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2003()
                instance.rowId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rowId"])
                instance.rowAlias = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rowAlias"])
                instance.rowName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rowName"])
                instance.seats = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["seats"])
                return instance
            }


            // Decoder for [InlineResponse400]
            Decoders.addDecoder(clazz: [InlineResponse400].self) { (source: AnyObject) -> [InlineResponse400] in
                return Decoders.decode(clazz: [InlineResponse400].self, source: source)
            }
            // Decoder for InlineResponse400
            Decoders.addDecoder(clazz: InlineResponse400.self) { (source: AnyObject) -> InlineResponse400 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse400()
                instance.result = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.details = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["details"])
                return instance
            }


            // Decoder for [Map]
            Decoders.addDecoder(clazz: [Map].self) { (source: AnyObject) -> [Map] in
                return Decoders.decode(clazz: [Map].self, source: source)
            }
            // Decoder for Map
            Decoders.addDecoder(clazz: Map.self) { (source: AnyObject) -> Map in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Map()
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.coordinates = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["coordinates"])
                return instance
            }


            // Decoder for [Row]
            Decoders.addDecoder(clazz: [Row].self) { (source: AnyObject) -> [Row] in
                return Decoders.decode(clazz: [Row].self, source: source)
            }
            // Decoder for Row
            Decoders.addDecoder(clazz: Row.self) { (source: AnyObject) -> Row in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Row()
                instance.rowId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rowId"])
                instance.rowAlias = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rowAlias"])
                instance.rowName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rowName"])
                instance.seats = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["seats"])
                return instance
            }


            // Decoder for [Seat]
            Decoders.addDecoder(clazz: [Seat].self) { (source: AnyObject) -> [Seat] in
                return Decoders.decode(clazz: [Seat].self, source: source)
            }
            // Decoder for Seat
            Decoders.addDecoder(clazz: Seat.self) { (source: AnyObject) -> Seat in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Seat()
                instance.ticketId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ticketId"])
                instance.ticketStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ticketStatus"])
                instance.ownerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ownerId"])
                instance.seatNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["seatNumber"])
                return instance
            }


            // Decoder for [SectorDetail]
            Decoders.addDecoder(clazz: [SectorDetail].self) { (source: AnyObject) -> [SectorDetail] in
                return Decoders.decode(clazz: [SectorDetail].self, source: source)
            }
            // Decoder for SectorDetail
            Decoders.addDecoder(clazz: SectorDetail.self) { (source: AnyObject) -> SectorDetail in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SectorDetail()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.selectSeats = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selectSeats"])
                instance.available = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["available"])
                instance.hasTickets = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["hasTickets"])
                return instance
            }


            // Decoder for [Sectors]
            Decoders.addDecoder(clazz: [Sectors].self) { (source: AnyObject) -> [Sectors] in
                return Decoders.decode(clazz: [Sectors].self, source: source)
            }
            // Decoder for Sectors
            Decoders.addDecoder(clazz: Sectors.self) { (source: AnyObject) -> Sectors in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Sectors()
                instance.gates = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["gates"])
                instance.map = Decoders.decodeOptional(clazz: InlineResponse2001Map.self, source: sourceDictionary["map"])
                return instance
            }


            // Decoder for [SubSectorDetails]
            Decoders.addDecoder(clazz: [SubSectorDetails].self) { (source: AnyObject) -> [SubSectorDetails] in
                return Decoders.decode(clazz: [SubSectorDetails].self, source: source)
            }
            // Decoder for SubSectorDetails
            Decoders.addDecoder(clazz: SubSectorDetails.self) { (source: AnyObject) -> SubSectorDetails in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SubSectorDetails()
                instance.subsectorId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subsectorId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.hasTickets = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["hasTickets"])
                return instance
            }


            // Decoder for [SubSectors]
            Decoders.addDecoder(clazz: [SubSectors].self) { (source: AnyObject) -> [SubSectors] in
                return Decoders.decode(clazz: [SubSectors].self, source: source)
            }
            // Decoder for SubSectors
            Decoders.addDecoder(clazz: SubSectors.self) { (source: AnyObject) -> SubSectors in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SubSectors()
                instance.subsectors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["subsectors"])
                return instance
            }
        }
    }
}
